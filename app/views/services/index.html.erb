<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Services</title>
  <%= csrf_meta_tags %>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #1E1B3A; /* Темный фон */
      color: white; /* Белый текст для контраста */
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
    }

    h1 {
      text-align: center;
      color: #FFF842; /* Золотистый для заголовка */
      margin-bottom: 20px;
      font-size: 2.5em;
      text-shadow: 0 0 30px rgba(255, 248, 66, 0.7), 0 0 60px rgba(255, 248, 66, 0.5);
    }

    .container {
      width: 80%;
      margin: 0 auto;
      text-align: center;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin: 20px 0;
      background-color: #2C2A50; /* Темный фон для таблицы */
    }

    th, td {
      padding: 10px;
      border: 1px solid #ddd;
      text-align: left;
    }

    th {
      background-color: #6A3D9C; /* Темный фиолетовый для заголовков таблицы */
      color: white;
    }

    tr:nth-child(even) {
      background-color: #3C315C; /* Более темный фон для четных строк */
    }

    tr:hover {
      background-color: #5C3A99; /* Акцент на строках при наведении */
    }

    .actions {
      display: flex;
      justify-content: center;
      gap: 10px;
    }

    .actions button {
      padding: 10px 20px;
      background-color: #6A3D9C; /* Темный фиолетовый для кнопок */
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s, transform 0.3s;
    }

    .actions button:hover {
      background-color: #FFF842; /* Золотистый для наведения */
      transform: scale(1.05);
      color: #403E10; /* Темный цвет текста */
    }

    /* Стиль для сообщения об ошибке */
    .flash-alert {
      color: #C12E2A; /* Красный для текста */
      background-color: #FFDDC1; /* Светлый фон */
      padding: 10px;
      text-align: center;
      border-radius: 5px;
      margin-bottom: 20px;
    }

    /* Стиль для модальных окон */
    .modal {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: #2C2A50; /* Темный фон для модального окна */
      padding: 20px;
      border: 1px solid #6A3D9C;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      z-index: 1001;
      color: white;
      border-radius: 5px;
      width: 400px;
      max-width: 90%; /* Ограничение ширины */
      box-sizing: border-box; /* Включаем padding в расчет ширины */
    }

    .modal.active {
      display: block;
    }

    .overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      z-index: 1000;
    }

    .overlay.active {
      display: block;
    }

    /* Стиль для элементов внутри модальных окон */
    .modal input,
    .modal button {
      width: 100%;
      padding: 12px 15px; /* Немного увеличены отступы для удобства */
      margin-bottom: 15px;
      border-radius: 5px;
      border: 1px solid #ddd;
      box-sizing: border-box; /* Включение padding в расчет ширины */
    }

    .modal button {
      background-color: #6A3D9C;
      color: white;
      cursor: pointer;
      transition: background-color 0.3s;
    }

    .modal button:hover {
      background-color: #FFF842;
    }

    /* Модальное окно для удаления */
    #deleteModal {
      background: #3C315C;
      width: 300px;
      text-align: center;
    }

    #deleteModal button {
      width: 48%;
      margin: 5px;
    }

    .pagination {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-top: 20px;
    }

    .pagination a,
    .pagination button {
      padding: 10px 20px;
      background-color: #6A3D9C; /* Темный фиолетовый для кнопок */
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s;
    }

    .pagination a:hover,
    .pagination button:hover {
      background-color: #FFF842; /* Золотистый при наведении */
    }

    .pagination a.active,
    .pagination button.active {
      background-color: #FFF842; /* Золотистый для активной кнопки */
      color: #403E10;
    }

    .pagination button[disabled] {
      background-color: #3C315C; /* Отключенная кнопка */
      cursor: not-allowed;
    }
    /* Анимированный фон */
    .background {
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      overflow: hidden;
      z-index: -1;
    }

    .bubble {
      position: absolute;
      width: 20px;
      height: 20px;
      background: radial-gradient(circle, rgba(255, 248, 66, 1) 0%, rgba(255, 248, 66, 0) 80%);
      border-radius: 50%;
      animation: moveAround 10s linear infinite;
    }

    @keyframes moveAround {
      0% {
        transform: translate(0, 0);
        opacity: 0.5;
      }
      25% {
        transform: translate(50px, -70px);
        opacity: 0.7;
      }
      50% {
        transform: translate(-50px, 50px);
        opacity: 0.4;
      }
      75% {
        transform: translate(-30px, -30px);
        opacity: 0.6;
      }
      100% {
        transform: translate(0, 0);
        opacity: 0.5;
      }
    }

  </style>
</head>
<body>
  <div class="background" id="background"></div>
  <% if flash[:alert] %>
    <div class="flash-alert">
      <%= flash[:alert] %>
    </div>
  <% end %>
  <h1>Services</h1>
  <div class="container">
    <div class="actions">
      <button id="addServiceButton">Add Service</button>
      <a href="/" class="button" style="background-color: #6A3D9C; padding: 10px 20px; color: white; text-decoration: none; border-radius: 5px;">Back to Home</a>
    </div>
    
    <table>
      <thead>
        <tr>
          <th>ID</th>
          <th>Name</th>
          <th>Description</th>
          <th>Price</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="serviceTable">
        <% @services.each do |service| %>
          <tr id="service-<%= service.id %>">
            <td><%= service.id %></td>
            <td><%= service.name %></td>
            <td><%= service.description %></td>
            <td><%= number_to_currency(service.price) %></td>
            <td class="actions">
              <button class="editButton" data-id="<%= service.id %>" data-name="<%= service.name %>" data-description="<%= service.description %>" data-price="<%= service.price %>">Edit</button>
              <button class="deleteButton" data-id="<%= service.id %>">Delete</button>
            </td>
          </tr>
        <% end %>
      </tbody>
    </table>

    <div class="pagination">
      <% if @services.prev_page %>
        <a href="<%= services_path(page: @services.prev_page) %>" class="prev">Prev</a>
      <% end %>

      <% if @services.next_page %>
        <a href="<%= services_path(page: @services.next_page) %>" class="next">Next</a>
      <% end %>
    </div>
  </div>

  <!-- Модальное окно для добавления и редактирования -->
  <div class="overlay"></div>
  <div class="modal" id="serviceModal">
    <form id="serviceForm" method="POST">
      <input type="hidden" name="_method" value="POST">
      <input type="hidden" name="authenticity_token" value="<%= form_authenticity_token %>">
      <input type="hidden" id="service_id" name="id">
      <label for="name">Name:</label>
      <input type="text" name="service[name]" id="name" required>
      <label for="description">Description:</label>
      <input type="text" name="service[description]" id="description">
      <label for="price">Price:</label>
      <input type="number" name="service[price]" id="price" step="0.01" required>
      <button type="submit">Save</button>
    </form>
    <button id="closeModal">Cancel</button>
  </div>

  <!-- Модальное окно для удаления -->
  <div class="modal" id="deleteModal">
    <p>Are you sure you want to delete this service?</p>
    <button id="confirmDeleteButton">Yes, Delete</button>
    <button id="cancelDeleteButton">Cancel</button>
  </div>

  <script>
    const modal = document.getElementById("serviceModal");
    const overlay = document.querySelector(".overlay");
    const addButton = document.getElementById("addServiceButton");
    const closeModalButton = document.getElementById("closeModal");
    const form = document.getElementById("serviceForm");

    const deleteModal = document.getElementById("deleteModal");
    const confirmDeleteButton = document.getElementById("confirmDeleteButton");
    const cancelDeleteButton = document.getElementById("cancelDeleteButton");

    let deleteId = null;

    const openModal = () => {
      modal.classList.add("active");
      overlay.classList.add("active");
    };

    const closeModal = () => {
      modal.classList.remove("active");
      overlay.classList.remove("active");
      form.reset();
    };

    const openDeleteModal = (id) => {
      deleteId = id;
      deleteModal.classList.add("active");
      overlay.classList.add("active");
    };

    const closeDeleteModal = () => {
      deleteModal.classList.remove("active");
      overlay.classList.remove("active");
    };

    addButton.addEventListener("click", () => {
      form.action = "/services";
      form.querySelector("input[name='_method']").value = "POST";
      openModal();
    });

    document.querySelectorAll(".editButton").forEach((button) => {
      button.addEventListener("click", () => {
        const data = button.dataset;
        document.getElementById("name").value = data.name;
        document.getElementById("description").value = data.description;
        document.getElementById("price").value = data.price;
        form.action = `/services/${data.id}`;
        form.querySelector("input[name='_method']").value = "PATCH";
        openModal();
      });
    });

    document.querySelectorAll(".deleteButton").forEach((button) => {
      button.addEventListener("click", () => {
        const id = button.dataset.id;
        openDeleteModal(id);
      });
    });

    confirmDeleteButton.addEventListener("click", () => {
      if (deleteId !== null) {
        fetch(`/services/${deleteId}`, {
          method: "DELETE",
          headers: { "X-CSRF-Token": document.querySelector("meta[name='csrf-token']").content },
        }).then(() => {
          document.getElementById(`service-${deleteId}`).remove();
          closeDeleteModal();
        });
      }
    });

    cancelDeleteButton.addEventListener("click", closeDeleteModal);

    overlay.addEventListener("click", closeModal);
    closeModalButton.addEventListener("click", closeModal);

    // Генерация пузырьков
    const background = document.getElementById('background');

    for (let i = 0; i < 100; i++) {
      const bubble = document.createElement('div');
      bubble.classList.add('bubble');
      
      const size = Math.random() * 50 + 10; // Размеры пузырей
      bubble.style.width = `${size}px`;
      bubble.style.height = `${size}px`;
      
      // Случайные начальные позиции
      bubble.style.left = `${Math.random() * 100}%`;
      bubble.style.top = `${Math.random() * 100}%`;
      
      bubble.style.animationDuration = `${Math.random() * 10 + 5}s`; // Разное время анимации
      bubble.style.animationDelay = `${Math.random() * 5}s`; // Разное время задержки
      background.appendChild(bubble);
    }

  </script>
</body>
</html>
